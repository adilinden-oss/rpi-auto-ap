#!/bin/bash

# MIT License
# 
# Copyright (c) 2020 Adi Linden
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This script heavily leans on the work done by others, namely:
#
#   - StackExchange "Automatically Create Hotspot if no Network is Available"
#       https://raspberrypi.stackexchange.com/a/100196
#   - StackExchange "Use systemd-networkd for general networking"
#       https://raspberrypi.stackexchange.com/a/108593
#   - GitHub 0unknwn/auto-hotspot
#       https://github.com/0unknwn/auto-hotspot
#   - GitHub gitbls/autoAP
#       https://github.com/gitbls/autoAP
#

# The primary purpose of this script is to be run by the wpa_cli@wlan0 
# service. There the script is called with two arguments:
#
#     $1 has the interface name
#     $2 has the wpa_supplicant status
#
# We care about the following statuses
#
#     CONNECTED             Detect client connected if combined with check
#                           of wireless status
#     DISCONNECTED          Detect client disconnected if combined with check
#                           of wireless status
#     AP-STA-CONNECTED      Station connected to AP
#     AP-STA-DISCONNECTED   Station disconnected from AP
#     AP-ENABLED            AP mode entered
#     AP-DISABLED           AP mode exited

# The secondary purpose of this script is to manually interact with
# it. 
#
#     --reset               Restore normal operation
#     --start-ap            Manually bump to AP mode

# Default interfaces
if_lan="eth0"
if_wlan="wlan0"


# Timers to wait in AP mode before scanning the network
timer_disconnected=30       # after last station disconnected
timer_accesspoint=120       # after accee point mode entered

# Debug specific
debug=0
debug_file="/tmp/rpi-auto-ap.debug"

# A status file to handle calls while waiting
wait_status="/var/run/rpi-auto-ap.wait"

# The `systemd-networkd` configuration file for network client mode
network_client="/etc/systemd/network/21-${if_wlan}-client.network"
network_ap="/etc/systemd/network/25-${if_wlan}-accesspoint.network"

# Must be root!
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root"
    echo
    echo "    sudo $0 $@"
    echo
    exit 1
fi

progname="$(basename $0)"

# Simple log handlers
function dolog() {
    logger --id "$progname: $@"

    # Debug
    [ "$debug" -eq "1" ] && echo "$(tstamp) [$$] log:   $@" >> "$debug_file"
}
function dodebug() {
    # Debug
    [ "$debug" -eq "1" ] && echo "$(tstamp) [$$] debug: $@" >> "$debug_file"
}

# Simple timestamp function
function tstamp() {
    date +%Y-%m-%d_%H:%M:%S.%N
}

# Configure network for client mode
function network_client() {
    # Debug
    dodebug "configure network for client"

    # Reconfigure network
    if [ -e "${network_client}~" ]; then
        mv "${network_client}~" "${network_client}"
        systemctl restart systemd-networkd
    fi
}

# Configure network for access point
function network_ap() {
    # Debug
    dodebug "configure network for access point"

    # Reconfigure network
    if [ -e "${network_client}" ]; then
        mv "${network_client}" "${network_client}~"
        systemctl restart systemd-networkd
    fi
}

# Configure wireless for client mode
function wireless_client() {
    # Debug
    dodebug "configure wireless as client"

    # Place wireless in client mode, scanning for networks
    wpa_cli -i $if_wlan reconfigure
}

# Configure wireless for access point mode
function wireless_ap() {
    # Debug
    dodebug "configure wireless as access point"

    # Place wireless in access point mode
    wpa_cli -i $if_wlan select_network 0
}

# Request wireless client mode (after timeout)
function request_wireless_client() {
    local timeout=$1

    # Debug
    dodebug "request wireless client in $timeout"

    # Write timestamp to status file
    status="wait ${timeout}@$(tstamp)"
    echo "$status" > $wait_status

    # Sleep for the timeout value
    sleep $timeout

    # Check for stations
    if [ "$(wpa_cli -i $if_wlan all_sta)" = "" ]; then

        # Check status file is ours
        if [ -e "$wait_status" ] && [ "$(head -1 $wait_status)" = "$status" ]; then
            dolog "$status completed executing client mode request"

            # Reconfigure wireless for client mode scan
            wireless_client
        else
            dolog "$status file was cleared, abort client mode request"
        fi
    else
        dolog "station(s) connected, abort client mode request"
    fi
}

# Clear status file
function clear_status() {
    # Debug
    dodebug "clear wait status file"

    [ -e "$wait_status" ] && rm -f "$wait_status"
}

# Debug
if [ "$1" == "$if_wlan" ]; then
    dodebug "wpa_cli args: $@"
    [ -z "$WPA_ID" ] || dodebug "wpa_cli env: WPA_ID=$WPA_ID"
    [ -z "$WPA_ID_STR" ] || dodebug "wpa_cli env: WPA_ID_STR=$WPA_ID_STR"
else
    dodebug "called args: $@"
fi

# Get command line args
case "$1" in

    # Reset operation
    --reset)
        dolog "request --reset"

        # User requested access point mode (force access point)
        # - remove any lock
        # - wireless to client mode
        # - reconfigure network
        clear_status
        wireless_client
        network_client
        exit 0
        ;;

    # Manually bump into AP mode
    --access-point)
        dolog "request --access-point"

        # User requested access point mode (temporary)
        # - wireless to access point mode
        # - reconfigure network
        # - enter wait loop to revert to client mode
        wireless_ap
        network_ap
        #request_wireless_client $timer_accesspoint
        nohup "$0" --request_wireless_client $timer_accesspoint >/dev/null 2>&1 &
        exit 0
        ;;

    # Manually force AP mode until next reboot
    --force-access-point)
        dolog "request --force-access-point"

        # User requested access point mode (forced)
        # - remove any lock
        # - wireless to access point mode
        # - reconfigure network
        # - stop the `wpa_cli` service
        [ -e "$wait_status" ] && rm -f "$wait_status"
        wireless_ap
        network_ap
        systemctl stop wpa_cli@${if_wlan}.service
        exit 0
        ;;

    # Run `request_wireless_client` as seperate process
    --request_wireless_client)
        dolog "request --request_wireless_client $2"

        # Execute the request_wireless_client function as a background
        # Requires secand argument with timeout value
        if [ -z "$2" ]; then
            dolog "error: missing timeout value"
            exit 1
        fi
        request_wireless_client "$2"
        exit 0
        ;;
esac

# Handle wpa_cli calls
case "$2" in

    # `wpa_cli` signalled client mode connected to network
    CONNECTED)
        dolog "wpa_cli CONNECTED - client mode connected"

        # Make sure we are in client (station) mode
        if wpa_cli -i $if_wlan status | grep -q "mode=station"; then

            # Wireless connected in client mode
            # - clear status to cancel any waiting processes
            # - reconfigure network
            clear_status
            network_client
        else
            dodebug "wireless not in client mode"
        fi
        ;;

    # `wpa_cli` signalled client mode disconnected from network
    DISCONNECTED)
        dolog "wpa_cli DISCONNECTED - client mode disconnected"

        # Make sure we are in client (station) mode
        if ! wpa_cli -i $if_wlan status | grep -q "mode=station"; then
            dodebug "wireless not in client mode"
        fi
        ;;

    # `wpa_cli` signalled station connected to access point
    AP-STA-CONNECTED)
        dolog "wpa_cli AP-STA-CONNECTED - station connected to AP"

        # Clear status file to signal any waiting processes to
        # remain in access point mode
        clear_status
        ;;

    # `wpa_cli` signalled station disconnected from access point
    AP-STA-DISCONNECTED)
        dolog "wpa_cli AP-STA-DISCONNECTED - station disconnected from AP"

        # Wireless entered access point mode
        # - enter wait loop to revert to client mode
        request_wireless_client $timer_disconnected
        ;;

    # `wpa_cli` signalled access point mode enabled
    AP-ENABLED)
        dolog "wpa_cli AP-ENABLED - access point mode entered"

        # Wireless entered access point mode
        # - reconfigure network
        # - enter wait loop to revert to client mode
        network_ap
        request_wireless_client $timer_accesspoint
        ;;

    # `wpa_cli` signalled access point mode disabled
    AP-DISABLED)
        dolog "wpa_cli AP-DISABLED - access point mode exited"
        ;;
esac

exit 0
# End